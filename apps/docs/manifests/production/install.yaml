apiVersion: v1
data:
  nginx.conf: |
    events {
        worker_connections 4096;
    }

    http {

        server {
            listen 8080 default_server;

            charset utf-8;
            gzip on;
            gzip_types text/plain text/xml application/xml text/css application/javascript;

            root /usr/share/nginx/html

            location / {
                try_files /index.html = 404;
            }

        }

    }
kind: ConfigMap
metadata:
  name: docs-nginx-config-hd4f9m77dh
  namespace: default
---
apiVersion: v1
data:
  index.html: |
    <!DOCTYPE html>
    <html>
        <head>
            <meta charset="utf-8" />
            <meta http-equiv="X-UA-Compatible" content="IE=edge" />
            <meta name="viewport" content="width=device-width,initial-scale=1.0" />
            <link rel="icon" href="/img/favicon.svg" />
            <link rel="apple-touch-icon" href="/img/touch-icon.png" />
            <title>NodeScript</title>
            <style>
                html, body {
                    margin: 0;
                    padding: 0;
                    overflow: hidden;
                }

                iframe {
                    width: 100vw;
                    height: 100vh;
                    border: 0;
                }
            </style>
        </head>
        <body>
            <iframe>
            </iframe>
            <script>
                const baseTitle = 'NodeScript Documentation'
                const baseUrl = "https://notebooks.nodescript.dev";
                const pathPrefix = "@nodescript/documentation";
                const iframe = document.querySelector('iframe');

                function  goto(path) {
                    iframe.src = [baseUrl, pathPrefix, path.replace(/^\//, '')]
                        .filter(Boolean)
                        .join('/');
                }

                goto(location.pathname);
                window.addEventListener('message', ev => {
                    const { notebook, firstLoad } = JSON.parse(ev.data);
                    document.title = [notebook.label, baseTitle].join(' Â· ');
                    const newPath = notebook.slug.replace(pathPrefix, '');
                    if (!firstLoad) {
                        history.pushState({ path: newPath }, '', newPath || '/');
                    }
                });
                window.addEventListener('popstate', ev => {
                    if (ev.state) {
                        goto(ev.state.path);
                    }
                });
            </script>
        </body>
    </html>
kind: ConfigMap
metadata:
  name: docs-nginx-files-286cfh6mmk
  namespace: default
---
apiVersion: v1
kind: Service
metadata:
  labels: {}
  name: docs
  namespace: default
spec:
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  selector:
    app: docs
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: docs
  namespace: default
spec:
  replicas: 2
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: docs
  template:
    metadata:
      labels:
        app: docs
    spec:
      automountServiceAccountToken: false
      containers:
      - image: nginx:1.27.1
        name: docs
        ports:
        - containerPort: 8080
          name: http
        resources:
          requests:
            cpu: 10m
            memory: 50Mi
        volumeMounts:
        - mountPath: /etc/nginx
          name: nginx-config
          readOnly: true
        - mountPath: /usr/share/nginx/html
          name: nginx-files
          readOnly: true
      nodeSelector:
        workload/default: "true"
      volumes:
      - configMap:
          name: docs-nginx-config-hd4f9m77dh
        name: nginx-config
      - configMap:
          name: docs-nginx-files-286cfh6mmk
        name: nginx-files
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: docs
  namespace: default
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: docs
